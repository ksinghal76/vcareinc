<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:component-scan base-package="com.vcareinc"/>

	<mvc:annotation-driven conversion-service="applicationConversionService">
		<mvc:argument-resolvers>
			<bean class="org.springframework.data.web.PageableArgumentResolver"></bean>
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	 <!--
    	Alternatively if you prefer annotations for DI:
    	  1. Add @Component to the factory bean.
    	  2. Add a component-scan element (from the context custom namespace) here.
    	  3. Remove XML bean declaration below.
      -->
	<bean id="applicationConversionService" class="com.vcareinc.utils.ApplicationConversionServiceFactoryBean"/>

    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
        <property name="flowRegistry" ref="flowRegistry"/>
        <property name="defaultHandler">
			<!-- If no flow match, map path to a view to render; e.g. the "/intro" path would map to the view named "intro" -->
			<bean class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />
		</property>
    </bean>

    <!-- Maps logical view names to Facelet templates in /WEB-INF (e.g. 'search' to '/WEB-INF/search.xhtml' -->
	<bean id="faceletsViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.faces.mvc.JsfView"/>
		<property name="prefix" value="/WEB-INF/jsf/" />
		<property name="suffix" value=".xhtml" />
		<property name="order" value="-1"/>
	</bean>

	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="order" value="0"/>
		<property name="mappings">
			<value>
				/javax.faces.resource/**=jsfResourceHandler
				/rfRes/**=jsfResourceHandler
			</value>
		</property>
	</bean>
    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
	<bean id="jsfResourceHandler" class="org.springframework.faces.webflow.JsfResourceRequestHandler" />

	<!-- Dispatches requests mapped to org.springframework.web.servlet.mvc.Controller implementations -->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />

	<!-- Dispatches requests mapped to flows to FlowHandler implementations -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor" />
		<property name="ajaxHandler">
			<bean class="org.springframework.faces.webflow.JsfAjaxHandler"/>
		</property>
	</bean>

	<!--
	  This bean sets up the Velocity environment for us based on a root path for templates.
	  Optionally, a properties file can be specified for more control over the Velocity
	  environment, but the defaults are pretty sane for file based template loading.
	-->
	<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
	  <property name="resourceLoaderPath" value="/WEB-INF/velocity/"/>
	</bean>

	<!--

	  View resolvers can also be configured with ResourceBundles or XML files. If you need
	  different view resolving based on Locale, you have to use the resource bundle resolver.

	-->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
	  <property name="cache" value="true"/>
	  <property name="prefix" value=""/>
	  <property name="suffix" value=".vm"/>

	  <!-- if you want to use the Spring Velocity macros, set this property to true -->
	  <property name="exposeSpringMacroHelpers" value="true"/>

	</bean>

	<bean id="systemPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
</beans>
